package de.fhdw.ergoholics.brainphaser.model;

import de.fhdw.ergoholics.brainphaser.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SETTINGS".
 */
public class Settings {

    private Long id;
    private java.util.Date timeBoxStage1;
    private java.util.Date timeBoxStage2;
    private java.util.Date timeBoxStage3;
    private java.util.Date timeBoxStage4;
    private java.util.Date timeBoxStage5;
    private java.util.Date timeBoxStage6;
    private long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SettingsDao myDao;

    private User settings;
    private Long settings__resolvedKey;


    public Settings() {
    }

    public Settings(Long id) {
        this.id = id;
    }

    public Settings(Long id, java.util.Date timeBoxStage1, java.util.Date timeBoxStage2, java.util.Date timeBoxStage3, java.util.Date timeBoxStage4, java.util.Date timeBoxStage5, java.util.Date timeBoxStage6, long userId) {
        this.id = id;
        this.timeBoxStage1 = timeBoxStage1;
        this.timeBoxStage2 = timeBoxStage2;
        this.timeBoxStage3 = timeBoxStage3;
        this.timeBoxStage4 = timeBoxStage4;
        this.timeBoxStage5 = timeBoxStage5;
        this.timeBoxStage6 = timeBoxStage6;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSettingsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getTimeBoxStage1() {
        return timeBoxStage1;
    }

    public void setTimeBoxStage1(java.util.Date timeBoxStage1) {
        this.timeBoxStage1 = timeBoxStage1;
    }

    public java.util.Date getTimeBoxStage2() {
        return timeBoxStage2;
    }

    public void setTimeBoxStage2(java.util.Date timeBoxStage2) {
        this.timeBoxStage2 = timeBoxStage2;
    }

    public java.util.Date getTimeBoxStage3() {
        return timeBoxStage3;
    }

    public void setTimeBoxStage3(java.util.Date timeBoxStage3) {
        this.timeBoxStage3 = timeBoxStage3;
    }

    public java.util.Date getTimeBoxStage4() {
        return timeBoxStage4;
    }

    public void setTimeBoxStage4(java.util.Date timeBoxStage4) {
        this.timeBoxStage4 = timeBoxStage4;
    }

    public java.util.Date getTimeBoxStage5() {
        return timeBoxStage5;
    }

    public void setTimeBoxStage5(java.util.Date timeBoxStage5) {
        this.timeBoxStage5 = timeBoxStage5;
    }

    public java.util.Date getTimeBoxStage6() {
        return timeBoxStage6;
    }

    public void setTimeBoxStage6(java.util.Date timeBoxStage6) {
        this.timeBoxStage6 = timeBoxStage6;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public User getSettings() {
        long __key = this.userId;
        if (settings__resolvedKey == null || !settings__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User settingsNew = targetDao.load(__key);
            synchronized (this) {
                settings = settingsNew;
            	settings__resolvedKey = __key;
            }
        }
        return settings;
    }

    public void setSettings(User settings) {
        if (settings == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.settings = settings;
            userId = settings.getId();
            settings__resolvedKey = userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
